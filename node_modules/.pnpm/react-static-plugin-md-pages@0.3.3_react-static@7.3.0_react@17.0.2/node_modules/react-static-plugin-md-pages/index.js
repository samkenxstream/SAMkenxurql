"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMarkdownTree = exports.useMarkdownPage = exports.PageContext = exports.hastToMdx = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@mdx-js/react");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** Recursively convert an MDX-compatible HAST to JSX */
var hastToMdx = function hastToMdx(node, assets) {
  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var children = null;

  if (node.children && node.children.length === 1) {
    children = hastToMdx(node.children[0], assets);
  } else if (node.children && node.children.length > 1) {
    children = node.children.map(function (node, i) {
      return hastToMdx(node, assets, i);
    });
  }

  switch (node.type) {
    case 'text':
      return node.value;

    case 'root':
      return children;

    case 'element':
      var props = _objectSpread({}, node.properties, {
        children: children,
        key: i
      }); // Normalise className props to consistently be strings


      if (Array.isArray(props.className)) props.className = props.className.join(' '); // Given a dictionary of image files, read the Webpack-included
      // output path and replace the `src` path.

      if (node.tagName === 'img') props.src = assets[props.src] || props.src;
      return (0, _react2.mdx)(node.tagName, props);

    default:
      return null;
  }
};

exports.hastToMdx = hastToMdx;

var PageContext = _react["default"].createContext({
  page: null
});
/** Returns the current page's markdown data */


exports.PageContext = PageContext;

var useMarkdownPage = function useMarkdownPage() {
  var _React$useContext = _react["default"].useContext(PageContext),
      page = _React$useContext.page;

  return page && page.frontmatter ? page : null;
};
/* Returns all page's nested markdown data */


exports.useMarkdownPage = useMarkdownPage;

var useMarkdownTree = function useMarkdownTree() {
  return __PAGES_DATA__;
};

exports.useMarkdownTree = useMarkdownTree;