"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = loader;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var path = _interopRequireWildcard(require("path"));

var _loaderUtils = require("loader-utils");

var _unistUtilSelect = require("unist-util-select");

var _githubSlugger = _interopRequireDefault(require("github-slugger"));

var _mdastUtilToString = _interopRequireDefault(require("mdast-util-to-string"));

var _mdxAstToMdxHast = _interopRequireDefault(require("@mdx-js/mdx/mdx-ast-to-mdx-hast"));

var _unistUtilVisit = _interopRequireDefault(require("unist-util-visit"));

var _unistUtilRemove = _interopRequireDefault(require("unist-util-remove"));

var _hastUtilRaw = _interopRequireDefault(require("hast-util-raw"));

var _markdown = require("./markdown");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var INDEX_PAGE_RE = /^(readme|index)$/i;
var REMAP_ROUTE_RE = /(?:[/\\]?(?:readme|index))?\.md$/i;

function loader(source) {
  var options = (0, _loaderUtils.getOptions)(this); // Ensure that the template and utilities are relative paths

  var location = options.location || process.cwd();
  var pathPrefix = options.pathPrefix || '';
  var utils = (0, _loaderUtils.stringifyRequest)(this, require.resolve('./index.js'));
  var processor = (0, _markdown.getMarkdownProcessor)(options.remarkPlugins); // Compute the page's originalPath and path

  var relative = path.relative(location, this.resourcePath);
  var filename = path.basename(relative, '.md');
  var originalPath = path.join(path.dirname(relative), filename);
  var keyPath = (pathPrefix ? [pathPrefix] : []).concat(originalPath.split(path.sep)).filter(function (key) {
    return !INDEX_PAGE_RE.test(key);
  });
  var basePath = (pathPrefix ? ['', pathPrefix] : ['']).concat(originalPath.split(path.sep)).join('/'); // Parse the markdown contents

  var tree = processor.parse(source);

  var pageData = _objectSpread({}, (0, _markdown.getPageData)(tree, filename), {
    originalPath: originalPath,
    key: keyPath[keyPath.length - 1],
    path: keyPath.join('/')
  }); // Use override template if provided


  var frontmatter = pageData.frontmatter;
  var template = (0, _loaderUtils.stringifyRequest)(this, frontmatter.template ? path.resolve(this.context, frontmatter.template) : options.defaultTemplate); // Fix up all links that end in `.md`

  (0, _unistUtilVisit["default"])(tree, 'link', function (node) {
    try {
      var _node$url$split = node.url.split('#'),
          _node$url$split2 = (0, _slicedToArray2["default"])(_node$url$split, 2),
          _node$url$split2$ = _node$url$split2[0],
          route = _node$url$split2$ === void 0 ? '' : _node$url$split2$,
          _node$url$split2$2 = _node$url$split2[1],
          hash = _node$url$split2$2 === void 0 ? '' : _node$url$split2$2; // Only apply to matching URLs


      if (!REMAP_ROUTE_RE.test(route) || /^\w+:/.test(route)) return node; // Append extra upwards direction for trailing slash

      var url = path.join(basePath, "../".concat(route)).replace(REMAP_ROUTE_RE, '/');
      if (hash) url += "#".concat(hash);
      node.url = url;
    } catch (_err) {}

    return node;
  }); // Convert from MAST to HAST

  var hast = (0, _mdxAstToMdxHast["default"])()(tree); // Convert raw nodes into HAST

  (0, _unistUtilVisit["default"])(hast, 'raw', function (node) {
    var _raw = (0, _hastUtilRaw["default"])(node),
        children = _raw.children,
        tagName = _raw.tagName,
        properties = _raw.properties;

    node.type = 'element';
    node.children = children;
    node.tagName = tagName;
    node.properties = properties;
  });
  var slugger = new _githubSlugger["default"]();
  var assets = [];
  (0, _unistUtilVisit["default"])(hast, 'element', function (node) {
    if (/h\d/.test(node.tagName)) {
      node.properties.id = slugger.slug((0, _mdastUtilToString["default"])(node));
    } else if (node.tagName === 'img') {
      var src = node.properties.src;

      if (/^\./.test(src)) {
        var _path = JSON.stringify(src);

        assets.push("  [".concat(_path, "]: require(").concat(_path, "),\n"));
      }
    }
  }); // Remove empty text lines

  (0, _unistUtilRemove["default"])(hast, 'text', function (node) {
    return /^[\n\r]+$/.test(node.value);
  }); // Remove empty paragraphs

  (0, _unistUtilRemove["default"])(hast, 'element', function (node) {
    return node.tagName === 'p' && node.children.length === 0;
  });
  return "\n    import React from \"react\";\n    import Template from ".concat(template, ";\n    import { PageContext, hastToMdx } from ").concat(utils, ";\n\n    var assets = {\n      ").concat(assets.join(''), "\n    };\n\n    var hast = ").concat(JSON.stringify(hast), ";\n    var pageData = ").concat(JSON.stringify(pageData), ";\n    var context = { page: pageData };\n\n    export default function MarkdownTemplate(props) {\n      var mdx = React.useMemo(() => hastToMdx(hast, assets), [hast, assets]);\n      return (\n        <PageContext.Provider value={context}>\n          <Template {...props}>{mdx}</Template>\n        </PageContext.Provider>\n      );\n    };\n  ");
}